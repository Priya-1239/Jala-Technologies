# Create an abstract class with abstract and non-abstract methods.
from abc import ABC, abstractmethod

class AbstractClass(ABC):

    @abstractmethod
    def abstract_method(self):
        pass

    def non_abstract_method(self):  
        print("This is a non-abstract method in the abstract class.")

class SubClass(AbstractClass):
    def abstract_method(self):
        print("Abstract method implemented in the subclass.")

if __name__ == "__main__":
    obj = SubClass()
    obj.abstract_method()
    obj.non_abstract_method()

# Create a sub class for an abstract class. Create an object in the child class for the
abstract class and access the non-abstract methods.

from abc import ABC, abstractmethod

# Abstract class
class AbstractClass(ABC):

    @abstractmethod
    def abstract_method(self):
        pass

    def non_abstract_method(self): 
        print("Non-abstract method in the abstract class.")

class SubClass(AbstractClass):
    def abstract_method(self):
        print("Abstract method implemented in the subclass.")

sub_obj = SubClass()

sub_obj.non_abstract_method()

# Create an instance for the child class in child class and call abstract methods
from abc import ABC, abstractmethod

class AbstractClass(ABC):

    @abstractmethod
    def abstract_method(self):
        pass  
        
class SubClass(AbstractClass):
    def abstract_method(self):
        print("Abstract method implemented in the subclass.")

    def create_instance_and_call(self):
        obj = SubClass() 
        obj.abstract_method()  

sub_obj = SubClass()
sub_obj.create_instance_and_call()

# Create an instance for the child class in child class and call non-abstract methods

from abc import ABC, abstractmethod

class AbstractClass(ABC):

    @abstractmethod
    def abstract_method(self):
        pass 
    def non_abstract_method(self):
        print("This is a non-abstract method from the abstract class.")

class SubClass(AbstractClass):
    def abstract_method(self):
        print("Abstract method implemented in the subclass.")

    def create_instance_and_call(self):
        obj = SubClass() 
        obj.non_abstract_method()  
        
sub_obj = SubClass()
sub_obj.create_instance_and_call()
